###################################################################
#  Plamo Linux ユーザ設定ファイルサンプル for tcsh
#                       Chisato Yamauchi (cyamauch@phyas.aichi-edu.ac.jp)
#                            Time-stamp: <2005-02-02 20:07:05 cyamauch>
#                            Time-stamp: <2016-01-22 17:21:41 kojima>

umask 022
limit coredumpsize 0

# 端末によって日本語表示する/しないの切り替え
#setenv LANG ja_JP.eucJP
#if ! ${?TERM} setenv TERM dumb
#if ( "x.${TERM}" == "x.linux" ) then
#  setenv LANG C
#endif

# if ( $SHLVL == 1 ) then
#   set path=( $path . )
# endif

#set dspmbyte = euc
set echo_style = both

# JISで表示できない端末はEUCにする
#if ( "x.${TERM}" == "x.xterm" || "x.${TERM}" == "x.dtterm" ) then
#  setenv JLESSCHARSET japanese-euc
#endif

#if ("$TERM" == "linux") then
#  setenv LANG ja_JP.eucJP
#  setenv JLESSCHARSET japanese-euc
#  setenv OUTPUT_CHARSET EUC-JP
#  set dspmbyte=euc
#else
source $HOME/.set_lang_csh @LOCALE@
#endif

# less で行番号をつけ，終了後に画面を残す
setenv LESS '-R -M -X'

setenv EDITOR 'vi'
#setenv EDITOR 'emacs -nw'
setenv PAGER 'less'

# for Python 2.7
#setenv PYTHONPATH /usr/lib64/python2.7/site-packages:/opt/kde/lib64/python2.7/site-packages

# NetNews のサーバを指定してください
# setenv NNTPSERVER news.hoge.hoge.ac.jp

# 通常は不要ですが、Firewall を越えるには SOCKS が必要な場合の設定
# setenv SOCKS_SERVER 100.100.100.1
# setenv SOCKS_NS 100.100.100.2

# proxy サーバごしに WWW を見る場合に lynx や www.el に必要な設定

# setenv http_proxy http://proxy.hoge.hoge.ac.jp:999/
# setenv ftp_proxy http://proxy.hoge.hoge.ac.jp:999/
# setenv wais_proxy http://proxy.hoge.hoge.ac.jp:999/
# setenv gopher_proxy http://proxy.hoge.hoge.ac.jp:999/

if ($?prompt) then
    setenv LS_OPTIONS "-F -T 0 -N"
    # TERMがdumbのとき(mule,emacs)以外には色をつける
    if ( "x.${TERM}" != "x.dumb" ) then
	eval `dircolors -c ~/.dir_colors`
        setenv LS_OPTIONS "--color=auto -F -T 0 -N"
    endif
    # ここからウィンドゥタイトル表示の設定
    if ( "x.${TERM}" == "x.xterm" || \
	 "x.${TERM}" == "x.kterm" || \
         "x.${TERM}" == "x.rxvt" || \
         "x.${TERM}" == "x.dtterm" || \
         "x.${TERM}" == "x.vt100" ) then
	switch( "${TERM}" )
	case "vt*":
	    setenv HN ""
	    breaksw
	default:
	    setenv HN "${HOST}:"
	    breaksw
	endsw
	alias getrmhmpwd 'setenv TTL_TMP_VAL `echo "/$HOME"|/usr/bin/sed -e "s/\//\\\//g"` ; setenv RMHMPWD `echo "/$PWD"|/usr/bin/sed -e "s/$TTL_TMP_VAL/\\\~/g"` ; if ( "/$RMHMPWD" == "//$PWD" ) setenv RMHMPWD "$PWD"'
	alias termtitle 'setenv TTL_TMP_VAL /dev/null ; tty > /dev/null ; if ( "$?" == "0" ) if ( -w `tty` ) setenv TTL_TMP_VAL `tty` ; echo -n "\033]0;$TERM - "`echo "$TERMTITLE"|/usr/bin/sed -e "s/\\\~/\~/g"`"\007" > $TTL_TMP_VAL'
	# 遅いマシンではこの設定の方がいいかも…
	# alias termtitle 'echo -n "\033]0;$TERM - ${HOST}:$PWD\007"'
	alias cd 'cd \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias pushd 'pushd \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias popd 'popd \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias su 'getrmhmpwd ; setenv TERMTITLE "'$HN'su \!*($RMHMPWD)" ; termtitle ; /bin/su \!* ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias telnet 'setenv TERMTITLE "'$HN'telnet \!*" ; termtitle ; /usr/bin/telnet \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias rlogin 'setenv TERMTITLE "'$HN'rlogin \!*" ; termtitle ; /usr/bin/rlogin \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	alias rsh 'setenv TERMTITLE "'$HN'rsh \!*" ; termtitle ; /usr/bin/rsh \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	unalias ssh
	setenv SSH_BIN `where ssh`
        if ( "x.$SSH_BIN" != "x." ) then
	    setenv SSH_BIN `which ssh`
	    alias ssh 'setenv TERMTITLE "'$HN'ssh \!*" ; termtitle ; '$SSH_BIN' \!* ; getrmhmpwd ; setenv TERMTITLE "'$HN'[$RMHMPWD]" ; termtitle'
	endif
	# Windowのタイトルバーにカレントディレクトリ
	# が表示可能な場合のプロンプト設定
	#   表示例→ hoge@host[/usr/lib64/X11/app-defaults]% _
	set prompt   = `whoami`@`hostname`"[%~]% "
	#   表示例→ hoge@host[/<4>app-defaults]% _
	#set prompt   = `whoami`@`hostname`"[%c01]% "
	#   表示例→ hoge@host[app-defaults]% _
	#set prompt   = `whoami`@`hostname`"[%c1]% "
    else
	# Windowのタイトルバーにカレントディレクトリ
	# が表示不可能な場合のプロンプト設定
	set prompt   = `whoami`@`hostname`"[%~]% "
	#set prompt   = `whoami`@`hostname`"[%c01]% "
	#set prompt   = `whoami`@`hostname`"[%c1]% "
    endif
    # alias ls `alias ls | sed 's/\!\*/$LS_OPTIONS \!\*/'`
    alias dir 'dir $LS_OPTIONS'
    alias vdir 'vdir $LS_OPTIONS'
    # 保存する履歴の行数
    set savehist = 512
    set history  = 512
    # 重複するイベントを保存しない
    set histdup = erase
    # 補完を有効にする(tcshでは常に有効)
    set filec
    # 補完で無視するサフィックス
#    set fignore = (.o \~)
    # traditional csh 補完にする
#    unset edit
    # beep音を鳴らさない
#    set nobeep
    # Ctrl+D で exit しない
#    set ignoreeof
    # ディレクトリに / を付加しない
#    unset addsuffix
    # 補完候補を表示
    set autolist
    # 検索付き履歴機能にする
    # PageUp,PageDownキー
    bindkey "^[[5~" history-search-backward
    bindkey "^[[6~" history-search-forward
    # ↑↓キー
    bindkey -k up history-search-backward
    bindkey -k down history-search-forward
#    bindkey -k up backward-word
#    bindkey -k down forward-word
    bindkey "^[[3~" delete-char
    # 端末によるBackSpaceキーの調整
    switch( "${TERM}" )
    case "kterm":
	stty erase '^H'
	bindkey "^?" delete-char
	breaksw
    case "sun":
	stty erase '^H'
	bindkey "^?" delete-char
	breaksw
    #case "vt*":
    #   stty erase '^H'
    #   bindkey "^?" delete-char
    #   breaksw
    default:
	stty erase '^?'
	breaksw
    endsw
    stty werase '^W'
    # Ctrl+S での stop をやめる
    stty stop undef
# alias は .alias に書いてください．
    if -f ~/.alias source ~/.alias
endif
